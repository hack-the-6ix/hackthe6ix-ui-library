$teal: #23b5af;
$aqua: #a9ded9;
$pink: #ec9d89;
$yellow: #edba4b;
$navy: #0e1355;
$light_blue: #88d2ee;
$sand: #fae0a1;
$magenta: #8b3763;
$error: #f14646;
$success: #18b918;
$background: #ffffff;
$disabled: darken($background, 15%);
$black: #000000;
$text: #6d6d6d;

$colors: (
  'text': $text,
  'teal': $teal,
  'aqua': $aqua,
  'pink': $pink,
  'yellow': $yellow,
  'navy': $navy,
  'light': $light_blue,
  'sand': $sand,
  'magenta': $magenta,
  'error': $error,
  'success': $success,
  'background': $background,
  'disabled': $disabled,
  'black': $black,
);

@function to-css-var($map, $acc: '-') {
  $res: ();
  @each $tag, $value in $map {
    $_tag: $acc + '-' + $tag;
    @if type-of($value) == 'map' {
      $res: map-merge($res, to-css-var($value, $_tag));
    } @else {
      $res: map-merge(
        $res,
        (
          $_tag: $value,
        )
      );
    }
  }
  @return $res;
}

// Creates states for colors
@function _color_generator($tag, $color) {
  @return (
    #{$tag}: $color,
    #{$tag}-hover: darken($color, 5%),
    #{$tag}-active: darken($color, 10%),
    #{$tag}-highlight: rgba($color, 0.05),
    #{$tag}-highlight-active: rgba($color, 0.1)
  );
}

$_: ();
@each $tag, $val in $colors {
  $_: map-merge($_, _color_generator($tag, $val));
}

// Create css variables
@mixin load {
  :root {
    @each $tag, $val in to-css-var($_) {
      #{$tag}: #{$val};
    }
  }

  html {
    background-color: var(--background);
    color: var(--text);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    color: var(--teal);
  }
}

$tags: ();
@each $tag in map-keys($colors) {
  $tags: append($tags, unquote($tag), comma);
}

// Expose variables for usage in code
:export {
  tags: $tags;
}
