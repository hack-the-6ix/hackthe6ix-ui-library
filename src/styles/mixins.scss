@use './variables';

@function to-css-var($map, $acc: '-') {
  $res: ();
  @each $tag, $value in $map {
    $_tag: $acc + '-' + $tag;
    @if type-of($value) == 'map' {
      $res: map-merge($res, to-css-var($value, $_tag));
    } @else {
      $res: map-merge(
        $res,
        (
          $_tag: $value,
        )
      );
    }
  }
  @return $res;
}

// Builds a transition with given props
@function _makeTransition($attr, $speed) {
  // Default (Please never do this)
  $res: all map-get(variables.$speed, $speed) variables.$ease;

  // Attribute with default props
  @if type-of($attr) == string {
    $res: $attr map-get(variables.$speed, $speed) variables.$ease;

    // Attribute with custom props
  } @else if type-of($attr) == map {
    $speed: if(map-has-key($attr, speed), pipe($attr, speed), $speed);
    $res: pipe($attr, name) map-get(variables.$speed, $speed) variables.$ease;
  }

  @return $res;
}

// Add tranisitions to attributes because im lazy
@mixin transition($attrs: null, $speed: normal) {
  $res: '';

  // Multiple attributes
  @if type-of($attrs) == list {
    @each $attr in $attrs {
      $res: #{$res}, _makeTransition($attr, $speed);
    }

    // Single/no attribute
  } @else {
    $res: _makeTransition($attrs, $speed);
  }

  transition: $res;
}

// Flex function thingy - (direction, all + self), (direction, all, self) OR (all, self)
@mixin flex($p1: null, $p2: $p1, $p3: $p2) {
  $d: (column, row, column-reverse, row-reverse);

  display: flex;
  @if $p1 {
    @if index($d, $p1) {
      flex-direction: $p1;
      @if $p2 != $p1 {
        @if $p2 != flex-start {
          justify-content: $p2;
        }
        @if $p3 != flex-start {
          align-items: $p3;
        }
      }
    } @else {
      @if $p1 != flex-start {
        justify-content: $p1;
      }
      @if $p2 != flex-start {
        align-items: $p2;
      }
    }
  }
}

// Positioning with defaulting for non-relative positioning
@mixin position(
  $position,
  $margin: auto,
  $top: 0,
  $right: $top,
  $bottom: $top,
  $left: $right
) {
  position: $position;
  margin: $margin;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin scroll {
  overflow: auto;
  &::-webkit-scrollbar {
    background-color: var(--background-hover);
    height: 6px;
    width: 6px;

    &-thumb {
      background-color: var(--text);
      border-radius: 999px;
    }
  }
}
