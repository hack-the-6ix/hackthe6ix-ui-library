@use '../styles/variables';
@use '../styles/mixins';
@use '../styles/colors';

.button {
  @include mixins.transition(background-color border-color color);
  font-size: map-get(variables.$text, smaller);
  border-radius: variables.$radius;
  border-style: solid;
  position: relative;
  border-width: 2px;
  font-weight: bold;
  overflow: hidden;
  cursor: pointer;
  outline: none;

  @each $tag in map-keys(colors.$colors) {
    @if $tag != background {
      &--color-#{'' + $tag} {
        --color-highlight-active: var(--#{$tag}-highlight-active);
        --color-highlight: var(--#{$tag}-highlight);
        --color-active: var(--#{$tag}-active);
        --color-hover: var(--#{$tag}-hover);
        --color: var(--#{$tag});
      }
    }
  }

  &--variant-solid {
    background-color: var(--color);
    border-color: var(--color);
    color: var(--background);

    &:not(:disabled) {
      &:hover,
      &:focus {
        background-color: var(--color-hover);
        border-color: var(--color-hover);
      }

      &:active {
        background-color: var(--color-active);
        border-color: var(--color-active);
      }
    }
  }

  &--variant-outline {
    background-color: transparent;
    border-color: var(--color);
    color: var(--color);

    &:not(:disabled) {
      &:hover,
      &:focus {
        background-color: var(--color);
        border-color: var(--color);
        color: var(--background);
      }

      &:active {
        background-color: var(--color-hover);
        border-color: var(--color-hover);
        color: var(--background);
      }
    }
  }

  &--variant-ghost {
    background-color: transparent;
    border-color: transparent;
    color: var(--color);

    &:not(:disabled) {
      &:hover,
      &:focus {
        background-color: var(--color-highlight);
      }

      &:active {
        background-color: var(--color-highlight-active);
      }
    }
  }

  &--variant-underline {
    background-color: transparent;
    border-color: var(--color);
    border: 0;
    border-bottom: 2px solid;
    border-radius: 0;
    color: var(--color);

    &:not(:disabled) {
      &:hover,
      &:focus {
        background-color: var(--color-highlight);
      }

      &:active {
        background-color: var(--color-highlight-active);
      }
    }
  }

  &:disabled {
    --color: var(--disabled);
    cursor: not-allowed;
  }
}

.icon {
  width: map-get(variables.$unit, element) * 1.2;

  &--left {
    margin-right: map-get(variables.$unit, element) * 1.2;
  }

  &--right {
    margin-left: map-get(variables.$unit, element) * 1.2;
  }

  &--loading {
    @include mixins.transition(transform opacity);
    @include mixins.position(absolute);
    transform: translateY(100%);
    opacity: 0;

    &-show {
      transform: translateY(0);
      opacity: 1;
    }
  }
}

.content {
  @include mixins.transition(transform opacity);
  padding: map-get(variables.$unit, element) * 1.2;
  align-items: center;
  justify-content: center;
  display: flex;
  opacity: 1;

  &--loading {
    transform: translateY(-100%);
    opacity: 0;
  }

  &--size-large {
    padding: map-get(variables.$unit, element) * 1.3;
  }

  &--size-normal {
    padding: map-get(variables.$unit, element) * 1.1;
  }

  &--size-small {
    padding: map-get(variables.$unit, element) * 0.9;
  }
}
